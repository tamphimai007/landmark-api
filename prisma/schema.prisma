// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int        @id @default(autoincrement())
  clerkId   String     @unique
  firstname String
  lastname  String
  email     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  landmarks Landmark[]
  bookings  Booking[]
  favorites Favorite[]
}

model Landmark {
  id          Int        @id @default(autoincrement())
  title       String
  description String     @db.VarChar(1000)
  lat         Float
  lng         Float
  price       Int
  secure_url  String
  public_id   String
  category    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId])
  profileId   String
  bookings    Booking[]
  favorites   Favorite[]
}

model Booking {
  id            Int      @id @default(autoincrement())
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  total         Int
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profile    Profile  @relation(fields: [profileId], references: [clerkId])
  profileId  String
  landmark   Landmark @relation(fields: [landmarkId], references: [id])
  landmarkId Int
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile    Profile  @relation(fields: [profileId], references: [clerkId])
  profileId  String
  landmark   Landmark @relation(fields: [landmarkId], references: [id])
  landmarkId Int
}
